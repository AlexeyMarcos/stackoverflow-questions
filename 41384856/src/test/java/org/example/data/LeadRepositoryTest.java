package org.example.data;

import org.example.domain.Company;
import org.example.domain.Employee;
import org.example.domain.Lead;
import org.example.domain.Site;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.Rollback;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.Random;
import java.util.UUID;

import static org.junit.Assert.*;

@ContextConfiguration(locations = "classpath:springContext.xml")
@Rollback
@RunWith(SpringJUnit4ClassRunner.class)
@Transactional
public class LeadRepositoryTest
{
  private static final String COMPANY_NAME = getString();
  private static final Random RANDOM       = new SecureRandom();

  @Autowired
  private CompanyRepository  companyRepository;
  @Autowired
  private EmployeeRepository employeeRepository;
  @Autowired
  private LeadRepository     leadRepository;
  @Autowired
  private SiteRepository     siteRepository;

  @Before
  public void setup()
  {
    // Create a company on which tests can be run.
    final Company company = companyRepository.saveAndFlush(new Company(COMPANY_NAME));

    for (int i = 0; i < getNumber(); ++i)
    {
      // Create some sites for the company.
      final Site site = siteRepository.saveAndFlush(new Site(company, getString()));

      for (int j = 0; j < getNumber(); ++j)
      {
        // Create some employees for the site.
        final Employee employee = employeeRepository.saveAndFlush(new Employee(site, getString()));

        for (int k = 0; k < getNumber(); ++k)
        {
          // Create some leads for the employee.
          leadRepository.saveAndFlush(new Lead(employee, new BigDecimal(getNumber())));
        }
      }
    }
  }

  @Test
  public void testFindAllByCompanyName()
  {
    // Find all leads generated by employees working for the company with the
    // given name.
    final Iterable<Lead> leads = leadRepository.findAllByCompanyName(COMPANY_NAME);

    assertNotNull(leads);
    assertTrue(leads.iterator().hasNext());

    leads.forEach(lead ->
                  {
                    assertNotNull(lead);
                    assertNotNull(lead.getEmployee());
                    assertNotNull(lead.getEmployee().getID());
                    assertNotNull(lead.getEmployee().getName());
                    assertNotNull(lead.getEmployee().getSite());
                    assertNotNull(lead.getEmployee().getSite().getCompany());
                    assertNotNull(lead.getEmployee().getSite().getCompany().getID());
                    assertNotNull(lead.getEmployee().getSite().getCompany().getName());
                    assertNotNull(lead.getEmployee().getSite().getID());
                    assertNotNull(lead.getEmployee().getSite().getName());
                    assertNotNull(lead.getID());
                    assertNotNull(lead.getProbability());

                    assertEquals(COMPANY_NAME, lead.getEmployee().getSite().getCompany().getName());

                    assertNotEquals(BigDecimal.ZERO, lead.getProbability());
                  });
  }

  private static int getNumber()
  {
    return 10 + RANDOM.nextInt(10);
  }

  private static String getString()
  {
    return UUID.randomUUID().toString();
  }
}
